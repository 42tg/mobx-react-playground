{"version":3,"sources":["App.js","serviceWorker.js","data/Todo.js","index.js"],"names":["Todo","observer","todo","key","id","style","textDecoration","done","onClick","mark","value","App","props","useState","setValue","className","onSubmit","e","preventDefault","todoList","addTodo","type","onChange","target","list","map","Boolean","window","location","hostname","match","Date","this","observable","action","TodoList","push","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAIMA,EAAOC,aAAS,YAAe,IAAZC,EAAW,EAAXA,KACrB,OACI,wBACIC,IAAKD,EAAKE,GACVC,MAAO,CAAEC,eAAgBJ,EAAKK,KAAO,eAAiB,IACtDC,QAAS,kBAAMN,EAAKO,MAAMP,EAAKK,QAE9BL,EAAKQ,UA8BHC,EAzBHV,aAAS,SAAAW,GAAU,IAAD,EACAC,mBAAS,IADT,mBACnBH,EADmB,KACZI,EADY,KAE1B,OACI,yBAAKC,UAAU,OACX,0BACIC,SAAU,SAAAC,GACNA,EAAEC,iBACFN,EAAMO,SAASC,QAAQV,KAG3B,2BACIW,KAAK,OACLX,MAAOA,EACPY,SAAU,SAAAL,GAAC,OAAIH,EAASG,EAAEM,OAAOb,WAGzC,4BACKE,EAAMO,SAASK,KAAKC,KAAI,SAAAvB,GAAI,OACzB,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIF,KAAMA,YCtB1BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yDCfO9B,GAAb,aACI,WAAYU,GAAO,yBAGnBN,GAAK,IAAI2B,KAHS,iEACdC,KAAKtB,MAAMA,EAFnB,iDAQkBA,GACVsB,KAAKzB,KAAOG,MATpB,wCAKKuB,KALL,wEAKwB,MALxB,kCAMKA,KANL,yEAMuB,KANvB,gCAQKC,KARL,oEAaaC,GAAb,kIAGoBzB,GACZsB,KAAKR,KAAKY,KAAK,IAAIpC,EAAKU,QAJhC,uCACKuB,KADL,wEACuB,MADvB,mCAGKC,KAHL,uECTMG,EAAQV,OAAOU,MAAQ,IAAIF,EAEjCG,IAASC,OAAO,kBAAC,EAAD,CAAKpB,SAAUkB,IAAWG,SAASC,eAAe,SFwH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c7b645cf.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nimport { observer } from \"mobx-react\"\n\nconst Todo = observer(({ todo }) => {\n    return (\n        <li\n            key={todo.id}\n            style={{ textDecoration: todo.done ? \"line-through\" : \"\" }}\n            onClick={() => todo.mark(!todo.done)}\n        >\n            {todo.value}\n        </li>\n    )\n})\n\nconst App = observer(props => {\n    const [value, setValue] = useState(\"\")\n    return (\n        <div className=\"App\">\n            <form\n                onSubmit={e => {\n                    e.preventDefault()\n                    props.todoList.addTodo(value)\n                }}\n            >\n                <input\n                    type=\"text\"\n                    value={value}\n                    onChange={e => setValue(e.target.value)}\n                />\n            </form>\n            <ul>\n                {props.todoList.list.map(todo => (\n                    <Todo key={todo.id} todo={todo} />\n                ))}\n            </ul>\n        </div>\n    )\n})\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {observable, action} from 'mobx'\n\n\nexport class Todo {\n    constructor(value){\n        this.value=value\n    }\n    id = new Date()\n    @observable value = \"\"\n    @observable done = false\n\n    @action mark (value) {\n        this.done = value\n    }\n}\n\nexport class TodoList {\n    @observable list = []\n\n    @action addTodo(value){\n        this.list.push(new Todo(value))\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TodoList } from './data/Todo';\n\nconst store = window.store = new TodoList()\n\nReactDOM.render(<App todoList={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}